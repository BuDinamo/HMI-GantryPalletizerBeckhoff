<div id="Desktop" data-tchmi-type="TcHmi.Controls.System.TcHmiView" data-tchmi-top="0" data-tchmi-left="0" data-tchmi-width-mode="Content" data-tchmi-min-width="100" data-tchmi-min-width-unit="%" data-tchmi-height-mode="Content" data-tchmi-min-height="100" data-tchmi-min-height-unit="%" data-tchmi-zindex="1" data-tchmi-creator-viewport-width="1280" data-tchmi-creator-viewport-height="1024">
  <div id="ViewDesktopBeckhoffLogo" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiImage" data-tchmi-src="Images/Beckhoff_Logo.svg" data-tchmi-left="30" data-tchmi-top="30" data-tchmi-width="194" data-tchmi-height="57" data-tchmi-zindex="1" data-tchmi-creator-locked="True">

  </div>
<div id="TcHmiTextblock" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="163" data-tchmi-left-unit="px" data-tchmi-text="MASUKAN LEBAR BOX" data-tchmi-top="448" data-tchmi-top-unit="px" data-tchmi-width="121" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-creator-locked="True">
</div>
<div id="TcHmiTextblock_1" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="21" data-tchmi-left-unit="px" data-tchmi-text="MASUKAN PANJANG BOX" data-tchmi-top="448" data-tchmi-top-unit="px" data-tchmi-width="122" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-creator-locked="True">
</div>
<div id="TcHmiButton_1" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiButton" data-tchmi-height="76" data-tchmi-height-unit="px" data-tchmi-left="21" data-tchmi-left-unit="px" data-tchmi-text="GENERATE BOX" data-tchmi-top="500" data-tchmi-top-unit="px" data-tchmi-width="277" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-text-font-size="30" data-tchmi-text-font-weight="Bold" data-tchmi-creator-locked="True">
<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "TcHmiButton_1.onPressed",
    "actions": [
      {
        "objectType": "Condition",
        "active": false,
        "parts": [
          {
            "if": [
              {
                "compare1": {
                  "objectType": "Symbol",
                  "valueType": "tchmi:general#/definitions/Number",
                  "symbolExpression": "%ctrl%panjangBOX::Value%/ctrl%"
                },
                "compare2": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:general#/definitions/Number",
                  "value": 0.0
                },
                "compareOperator": ">",
                "logic": null
              },
              {
                "compare1": {
                  "objectType": "Symbol",
                  "valueType": "tchmi:general#/definitions/Number",
                  "symbolExpression": "%ctrl%lebarBOX::Value%/ctrl%"
                },
                "compare2": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:general#/definitions/Number",
                  "value": 0.0
                },
                "compareOperator": ">",
                "logic": "AND"
              }
            ],
            "then": [
              {
                "objectType": "WriteToSymbol",
                "active": true,
                "symbolExpression": "%i%BoxCounter%/i%",
                "value": {
                  "objectType": "Symbol",
                  "valueType": "tchmi:general#/definitions/String",
                  "symbolExpression": "%f%%i%BoxCounter%/i%+1%/f%"
                },
                "asyncWait": true
              },
              {
                "objectType": "JavaScript",
                "active": true,
                "sourceLines": [
                  "var increment = TcHmi.Symbol.read('BoxCounter', TcHmi.SymbolType.Internal); ",
                  "var uniqueId = 'BOX_' + increment;",
                  "",
                  "var lebar = TcHmi.Controls.get('lebarBOX').getValue();",
                  "var panjang = TcHmi.Controls.get('panjangBOX').getValue();",
                  "",
                  "var myRect = TcHmi.ControlFactory.createEx(",
                  "    'TcHmi.Controls.Beckhoff.TcHmiRectangle',",
                  "    uniqueId,",
                  "    {",
                  "        'data-tchmi-top': 220, ",
                  "        'data-tchmi-left': 370, ",
                  "        'data-tchmi-width': lebar, ",
                  "        'data-tchmi-height': panjang,",
                  "        'data-tchmi-fill-color': {",
                  "            'color': 'rgba(134,90,53,1.000)'",
                  "        }",
                  "   }",
                  ");",
                  "var scaleTransformation = JSON.parse(TcHmi.Symbol.read('ScaleTrans', TcHmi.SymbolType.Internal));",
                  "var originTransformation = JSON.parse(TcHmi.Symbol.read('OriginTrans', TcHmi.SymbolType.Internal));",
                  "myRect.setTransform([scaleTransformation, originTransformation]);",
                  "",
                  "var desktop = TcHmi.Controls.get('Desktop'); ",
                  "\tif (desktop && myRect) ",
                  "\t{",
                  "    \tdesktop.addChild(myRect); ",
                  "\t}",
                  "\t",
                  "TcHmi.Symbol.writeEx('%i%RectID%/i%', uniqueId, function(data) {});",
                  "",
                  "var newArray = TcHmi.Symbol.read('RectIndex', TcHmi.SymbolType.Internal); ",
                  "newArray.push(uniqueId);",
                  "TcHmi.Symbol.writeEx2('%i%RectIndex%/i%', newArray, function(writeResult) {});",
                  "",
                  "var newIndex = newArray.indexOf(uniqueId);",
                  "TcHmi.Controls.get('TcHmiCombobox').setSelectedIndex(newIndex);",
                  "TcHmi.Controls.get('TcHmiCombobox_1').setSelectedIndex(10);"
                ],
                "injectContextObject": true,
                "asyncWait": true,
                "waitMode": "Asynchronous"
              }
            ]
          },
          {
            "else": [
              {
                "objectType": "JavaScript",
                "active": true,
                "sourceLines": [
                  "alert(\"WARNING!\\nPlease Enter Valid Input for BOX Length and Width\");"
                ],
                "injectContextObject": false,
                "asyncWait": true,
                "waitMode": "Synchronous"
              }
            ]
          }
        ],
        "asyncWait": true
      },
      {
        "objectType": "Condition",
        "active": true,
        "parts": [
          {
            "if": [
              {
                "compare1": {
                  "objectType": "Symbol",
                  "valueType": "tchmi:general#/definitions/Number",
                  "symbolExpression": "%ctrl%panjangBOX::Value%/ctrl%"
                },
                "compare2": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:general#/definitions/Number",
                  "value": 0.0
                },
                "compareOperator": ">",
                "logic": null
              },
              {
                "compare1": {
                  "objectType": "Symbol",
                  "valueType": "tchmi:general#/definitions/Number",
                  "symbolExpression": "%ctrl%lebarBOX::Value%/ctrl%"
                },
                "compare2": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:general#/definitions/Number",
                  "value": 0.0
                },
                "compareOperator": ">",
                "logic": "AND"
              }
            ],
            "then": [
              {
                "objectType": "WriteToSymbol",
                "active": true,
                "symbolExpression": "%i%BoxCounter%/i%",
                "value": {
                  "objectType": "Symbol",
                  "valueType": "tchmi:general#/definitions/String",
                  "symbolExpression": "%f%%i%BoxCounter%/i%+1%/f%"
                },
                "asyncWait": true
              },
              {
                "objectType": "JavaScript",
                "active": true,
                "sourceLines": [
                  "var increment = TcHmi.Symbol.read('BoxCounter', TcHmi.SymbolType.Internal); ",
                  "var uniqueId = 'BOX_' + increment;",
                  "",
                  "var lebar = TcHmi.Controls.get('lebarBOX').getValue();",
                  "var panjang = TcHmi.Controls.get('panjangBOX').getValue();",
                  "",
                  "var myRect = TcHmi.ControlFactory.createEx(",
                  "    'TcHmi.Controls.Beckhoff.TcHmiTextblock',",
                  "    uniqueId,",
                  "    {",
                  "        'data-tchmi-top': 220, ",
                  "        'data-tchmi-left': 370, ",
                  "        'data-tchmi-width': lebar, ",
                  "        'data-tchmi-height': panjang,",
                  "        'data-tchmi-border-style': {",
                  "\t\t\t\"left\": \"Dashed\",",
                  "\t\t\t\"right\": \"Dashed\",",
                  "\t\t\t\"top\": \"Solid\",",
                  "\t\t\t\"bottom\": \"Dashed\"",
                  "        },",
                  "        'data-tchmi-border-width': {",
                  "\t\t\t\"left\": 1,",
                  "\t\t\t\"right\": 1,",
                  "\t\t\t\"top\": 5,",
                  "\t\t\t\"bottom\": 1,",
                  "\t\t\t\"leftUnit\": \"px\",",
                  "\t\t\t\"rightUnit\": \"px\",",
                  "\t\t\t\"topUnit\": \"px\",",
                  "\t\t\t\"bottomUnit\": \"px\"",
                  "        },",
                  "        'data-tchmi-border-color': {",
                  "\t\t\t\"color\": \"rgba(255, 0, 0, 1)\",",
                  "        },",
                  "        'data-tchmi-text-horizontal-alignment' : \"Center\",",
                  "        'data-tchmi-text-font-size':20,",
                  "        'data-tchmi-text' : uniqueId,",
                  "   }",
                  ");",
                  "",
                  "var rotationStates = JSON.parse(TcHmi.Symbol.read('rotationStates', TcHmi.SymbolType.Internal));",
                  "rotationStates[uniqueId] = 0;",
                  "TcHmi.Symbol.writeEx('%i%rotationStates%/i%', JSON.stringify(rotationStates));",
                  "console.log(rotationStates);",
                  "",
                  "var scaleTransformation = JSON.parse(TcHmi.Symbol.read('ScaleTrans', TcHmi.SymbolType.Internal));",
                  "var originTransformation = JSON.parse(TcHmi.Symbol.read('OriginTrans', TcHmi.SymbolType.Internal));",
                  "myRect.setTransform([scaleTransformation, originTransformation]);",
                  "",
                  "var desktop = TcHmi.Controls.get('Desktop'); ",
                  "\tif (desktop && myRect) ",
                  "\t{",
                  "    \tdesktop.addChild(myRect); ",
                  "\t}",
                  "\t",
                  "TcHmi.Symbol.writeEx('%i%RectID%/i%', uniqueId);",
                  "",
                  "var newArray = TcHmi.Symbol.read('RectIndex', TcHmi.SymbolType.Internal); ",
                  "newArray.push(uniqueId);",
                  "TcHmi.Symbol.writeEx2('%i%RectIndex%/i%', newArray, function(writeResult) {});",
                  "",
                  "var newIndex = newArray.indexOf(uniqueId);",
                  "TcHmi.Controls.get('TcHmiCombobox').setSelectedIndex(newIndex);",
                  "TcHmi.Controls.get('TcHmiCombobox_1').setSelectedIndex(10);"
                ],
                "injectContextObject": true,
                "asyncWait": true,
                "waitMode": "Asynchronous"
              }
            ]
          },
          {
            "else": [
              {
                "objectType": "JavaScript",
                "active": true,
                "sourceLines": [
                  "alert(\"WARNING!\\nPlease Enter Valid Input for BOX Length and Width\");"
                ],
                "injectContextObject": false,
                "asyncWait": true,
                "waitMode": "Synchronous"
              }
            ]
          }
        ],
        "asyncWait": true
      }
    ]
  }
]
</script>

<script data-tchmi-target-attribute="data-tchmi-border-radius" type="application/json">
{
  "topLeft": 12.0,
  "topRight": 12.0,
  "bottomLeft": 12.0,
  "bottomRight": 12.0,
  "topLeftUnit": "px",
  "topRightUnit": "px",
  "bottomLeftUnit": "px",
  "bottomRightUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-style" type="application/json">
{
  "left": "None",
  "right": "None",
  "top": "None",
  "bottom": "None"
}
</script>
</div>
<div id="TcHmiButton_3" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiButton" data-tchmi-height="51" data-tchmi-height-unit="px" data-tchmi-left="122" data-tchmi-left-unit="px" data-tchmi-text="Move Up" data-tchmi-top="625" data-tchmi-top-unit="px" data-tchmi-width="75" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-icon="" data-tchmi-text-font-size="20" data-tchmi-creator-locked="True">



<script data-tchmi-target-attribute="data-tchmi-border-radius" type="application/json">
{
  "topLeft": 5.0,
  "topRight": 5.0,
  "bottomLeft": 5.0,
  "bottomRight": 5.0,
  "topLeftUnit": "px",
  "topRightUnit": "px",
  "bottomLeftUnit": "px",
  "bottomRightUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 0,
  "right": 0,
  "top": 0,
  "bottom": 0,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "TcHmiButton_3.onStatePressed",
    "actions": [
      {
        "objectType": "Condition",
        "active": true,
        "parts": [
          {
            "if": [
              {
                "compare1": {
                  "objectType": "Symbol",
                  "valueType": "tchmi:general#/definitions/UDINT",
                  "symbolExpression": "%ctrl%TcHmiCombobox::SelectedIndex%/ctrl%"
                },
                "compare2": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:general#/definitions/UDINT",
                  "value": 0
                },
                "compareOperator": ">",
                "logic": null
              }
            ],
            "then": [
              {
                "objectType": "Condition",
                "active": true,
                "parts": [
                  {
                    "if": [
                      {
                        "compare1": {
                          "objectType": "Symbol",
                          "valueType": "tchmi:general#/definitions/UDINT",
                          "symbolExpression": "%ctrl%TcHmiCombobox_1::SelectedIndex%/ctrl%"
                        },
                        "compare2": {
                          "objectType": "StaticValue",
                          "valueType": "tchmi:general#/definitions/UDINT",
                          "value": 0
                        },
                        "compareOperator": ">",
                        "logic": null
                      }
                    ],
                    "then": [
                      {
                        "objectType": "JavaScript",
                        "active": true,
                        "sourceLines": [
                          "MoveUp = setInterval(function() {",
                          "\tvar x = TcHmi.Controls.get('activeRECT').getText();",
                          "\tvar top1 = TcHmi.Controls.get(x).getTop();",
                          "\tvar step = parseInt(TcHmi.Controls.get('TcHmiCombobox_1').getSelectedValue());",
                          "\ttop1 -= (step*0.75);",
                          "\tTcHmi.Controls.get(x).setTop(top1)",
                          "}, 75);"
                        ],
                        "injectContextObject": true,
                        "asyncWait": true,
                        "waitMode": "Asynchronous"
                      }
                    ]
                  },
                  {
                    "else": [
                      {
                        "objectType": "JavaScript",
                        "active": true,
                        "sourceLines": [
                          "alert(\"NO MOVE STEP SIZE SELECTED\");"
                        ],
                        "injectContextObject": false,
                        "asyncWait": true,
                        "waitMode": "Synchronous"
                      }
                    ]
                  }
                ],
                "asyncWait": true
              }
            ]
          },
          {
            "else": [
              {
                "objectType": "JavaScript",
                "active": true,
                "sourceLines": [
                  "alert(\"NO BOX ID SELECTED\");"
                ],
                "injectContextObject": false,
                "asyncWait": true,
                "waitMode": "Synchronous"
              }
            ]
          }
        ],
        "asyncWait": true
      }
    ]
  },
  {
    "event": "TcHmiButton_3.onStateReleased",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "clearInterval(MoveUp);"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>
</div>
<div id="TcHmiButton_4" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiButton" data-tchmi-height="51" data-tchmi-height-unit="px" data-tchmi-left="122" data-tchmi-left-unit="px" data-tchmi-text="Move Down" data-tchmi-top="727" data-tchmi-top-unit="px" data-tchmi-width="75" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-text-font-size="20" data-tchmi-creator-locked="True">



<script data-tchmi-target-attribute="data-tchmi-border-radius" type="application/json">
{
  "topLeft": 5.0,
  "topRight": 5.0,
  "bottomLeft": 5.0,
  "bottomRight": 5.0,
  "topLeftUnit": "px",
  "topRightUnit": "px",
  "bottomLeftUnit": "px",
  "bottomRightUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 0,
  "right": 0,
  "top": 0,
  "bottom": 0,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "TcHmiButton_4.onStatePressed",
    "actions": [
      {
        "objectType": "Condition",
        "active": true,
        "parts": [
          {
            "if": [
              {
                "compare1": {
                  "objectType": "Symbol",
                  "valueType": "tchmi:general#/definitions/UDINT",
                  "symbolExpression": "%ctrl%TcHmiCombobox::SelectedIndex%/ctrl%"
                },
                "compare2": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:general#/definitions/UDINT",
                  "value": 0
                },
                "compareOperator": ">",
                "logic": null
              }
            ],
            "then": [
              {
                "objectType": "Condition",
                "active": true,
                "parts": [
                  {
                    "if": [
                      {
                        "compare1": {
                          "objectType": "Symbol",
                          "valueType": "tchmi:general#/definitions/UDINT",
                          "symbolExpression": "%ctrl%TcHmiCombobox_1::SelectedIndex%/ctrl%"
                        },
                        "compare2": {
                          "objectType": "StaticValue",
                          "valueType": "tchmi:general#/definitions/UDINT",
                          "value": 0
                        },
                        "compareOperator": ">",
                        "logic": null
                      }
                    ],
                    "then": [
                      {
                        "objectType": "JavaScript",
                        "active": true,
                        "sourceLines": [
                          "MoveDown = setInterval(function() {",
                          "\tvar x = TcHmi.Controls.get('activeRECT').getText();",
                          "\tvar top1 = TcHmi.Controls.get(x).getTop();",
                          "\tvar step = parseInt(TcHmi.Controls.get('TcHmiCombobox_1').getSelectedValue());",
                          "\ttop1 += (step*0.75);",
                          "\tTcHmi.Controls.get(x).setTop(top1)",
                          "}, 75);"
                        ],
                        "injectContextObject": true,
                        "asyncWait": true,
                        "waitMode": "Asynchronous"
                      }
                    ]
                  },
                  {
                    "else": [
                      {
                        "objectType": "JavaScript",
                        "active": true,
                        "sourceLines": [
                          "alert(\"NO MOVE STEP SIZE SELECTED\");"
                        ],
                        "injectContextObject": false,
                        "asyncWait": true,
                        "waitMode": "Synchronous"
                      }
                    ]
                  }
                ],
                "asyncWait": true
              }
            ]
          },
          {
            "else": [
              {
                "objectType": "JavaScript",
                "active": true,
                "sourceLines": [
                  "alert(\"NO BOX ID SELECTED\");"
                ],
                "injectContextObject": false,
                "asyncWait": true,
                "waitMode": "Synchronous"
              }
            ]
          }
        ],
        "asyncWait": true
      }
    ]
  },
  {
    "event": "TcHmiButton_4.onStateReleased",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "clearInterval(MoveDown);"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>
</div>
<div id="TcHmiButton_5" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiButton" data-tchmi-height="51" data-tchmi-height-unit="px" data-tchmi-left="214" data-tchmi-left-unit="px" data-tchmi-text="Move Right" data-tchmi-top="676" data-tchmi-top-unit="px" data-tchmi-width="84" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-text-font-size="20" data-tchmi-creator-locked="True">



<script data-tchmi-target-attribute="data-tchmi-border-radius" type="application/json">
{
  "topLeft": 5.0,
  "topRight": 5.0,
  "bottomLeft": 5.0,
  "bottomRight": 5.0,
  "topLeftUnit": "px",
  "topRightUnit": "px",
  "bottomLeftUnit": "px",
  "bottomRightUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 0,
  "right": 0,
  "top": 0,
  "bottom": 0,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>







<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "TcHmiButton_5.onStatePressed",
    "actions": [
      {
        "objectType": "Condition",
        "active": true,
        "parts": [
          {
            "if": [
              {
                "compare1": {
                  "objectType": "Symbol",
                  "valueType": "tchmi:general#/definitions/UDINT",
                  "symbolExpression": "%ctrl%TcHmiCombobox::SelectedIndex%/ctrl%"
                },
                "compare2": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:general#/definitions/UDINT",
                  "value": 0
                },
                "compareOperator": ">",
                "logic": null
              }
            ],
            "then": [
              {
                "objectType": "Condition",
                "active": true,
                "parts": [
                  {
                    "if": [
                      {
                        "compare1": {
                          "objectType": "Symbol",
                          "valueType": "tchmi:general#/definitions/UDINT",
                          "symbolExpression": "%ctrl%TcHmiCombobox_1::SelectedIndex%/ctrl%"
                        },
                        "compare2": {
                          "objectType": "StaticValue",
                          "valueType": "tchmi:general#/definitions/UDINT",
                          "value": 0
                        },
                        "compareOperator": ">",
                        "logic": null
                      }
                    ],
                    "then": [
                      {
                        "objectType": "JavaScript",
                        "active": true,
                        "sourceLines": [
                          "/*",
                          "var x = TcHmi.Controls.get('activeRECT').getText();",
                          "var top1 = TcHmi.Controls.get(x).getLeft();",
                          "var step = parseInt(TcHmi.Controls.get('TcHmiCombobox_1').getSelectedValue());",
                          "top1 += (step*0.75);",
                          "TcHmi.Controls.get(x).setLeft(top1);*/",
                          "",
                          "MoveRight = setInterval(function() {",
                          "\tvar x = TcHmi.Controls.get('activeRECT').getText();",
                          "\tvar top1 = TcHmi.Controls.get(x).getLeft();",
                          "\tvar step = parseInt(TcHmi.Controls.get('TcHmiCombobox_1').getSelectedValue());",
                          "\ttop1 += (step*0.75);",
                          "\tTcHmi.Controls.get(x).setLeft(top1);",
                          "}, 75);"
                        ],
                        "injectContextObject": true,
                        "asyncWait": true,
                        "waitMode": "Asynchronous"
                      }
                    ]
                  },
                  {
                    "else": [
                      {
                        "objectType": "JavaScript",
                        "active": true,
                        "sourceLines": [
                          "alert(\"NO MOVE STEP SIZE SELECTED\");"
                        ],
                        "injectContextObject": false,
                        "asyncWait": true,
                        "waitMode": "Synchronous"
                      }
                    ]
                  }
                ],
                "asyncWait": true
              }
            ]
          },
          {
            "else": [
              {
                "objectType": "JavaScript",
                "active": true,
                "sourceLines": [
                  "alert(\"NO BOX ID SELECTED\");"
                ],
                "injectContextObject": false,
                "asyncWait": true,
                "waitMode": "Synchronous"
              }
            ]
          }
        ],
        "asyncWait": true
      }
    ]
  },
  {
    "event": "TcHmiButton_5.onStateReleased",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "clearInterval(MoveRight);"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>
</div>
<div id="TcHmiButton_6" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiButton" data-tchmi-height="51" data-tchmi-height-unit="px" data-tchmi-left="21" data-tchmi-left-unit="px" data-tchmi-text="Move Left" data-tchmi-top="676" data-tchmi-top-unit="px" data-tchmi-width="84" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-text-font-size="20" data-tchmi-creator-locked="True">



<script data-tchmi-target-attribute="data-tchmi-border-radius" type="application/json">
{
  "topLeft": 5.0,
  "topRight": 5.0,
  "bottomLeft": 5.0,
  "bottomRight": 5.0,
  "topLeftUnit": "px",
  "topRightUnit": "px",
  "bottomLeftUnit": "px",
  "bottomRightUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 0,
  "right": 0,
  "top": 0,
  "bottom": 0,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "TcHmiButton_6.onStatePressed",
    "actions": [
      {
        "objectType": "Condition",
        "active": true,
        "parts": [
          {
            "if": [
              {
                "compare1": {
                  "objectType": "Symbol",
                  "valueType": "tchmi:general#/definitions/UDINT",
                  "symbolExpression": "%ctrl%TcHmiCombobox::SelectedIndex%/ctrl%"
                },
                "compare2": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:general#/definitions/UDINT",
                  "value": 0
                },
                "compareOperator": ">",
                "logic": null
              }
            ],
            "then": [
              {
                "objectType": "Condition",
                "active": true,
                "parts": [
                  {
                    "if": [
                      {
                        "compare1": {
                          "objectType": "Symbol",
                          "valueType": "tchmi:general#/definitions/UDINT",
                          "symbolExpression": "%ctrl%TcHmiCombobox_1::SelectedIndex%/ctrl%"
                        },
                        "compare2": {
                          "objectType": "StaticValue",
                          "valueType": "tchmi:general#/definitions/UDINT",
                          "value": 0
                        },
                        "compareOperator": ">",
                        "logic": null
                      }
                    ],
                    "then": [
                      {
                        "objectType": "JavaScript",
                        "active": true,
                        "sourceLines": [
                          "/*",
                          "var x = TcHmi.Controls.get('activeRECT').getText();",
                          "var top1 = TcHmi.Controls.get(x).getLeft();",
                          "var step = parseInt(TcHmi.Controls.get('TcHmiCombobox_1').getSelectedValue());",
                          "top1 += (step*0.75);",
                          "TcHmi.Controls.get(x).setLeft(top1);*/",
                          "",
                          "MoveLeft= setInterval(function() {",
                          "\tvar x = TcHmi.Controls.get('activeRECT').getText();",
                          "\tvar top1 = TcHmi.Controls.get(x).getLeft();",
                          "\tvar step = parseInt(TcHmi.Controls.get('TcHmiCombobox_1').getSelectedValue());",
                          "\ttop1 -= (step*0.75);",
                          "\tTcHmi.Controls.get(x).setLeft(top1);",
                          "}, 75);"
                        ],
                        "injectContextObject": true,
                        "asyncWait": true,
                        "waitMode": "Asynchronous"
                      }
                    ]
                  },
                  {
                    "else": [
                      {
                        "objectType": "JavaScript",
                        "active": true,
                        "sourceLines": [
                          "alert(\"NO MOVE STEP SIZE SELECTED\");"
                        ],
                        "injectContextObject": false,
                        "asyncWait": true,
                        "waitMode": "Synchronous"
                      }
                    ]
                  }
                ],
                "asyncWait": true
              }
            ]
          },
          {
            "else": [
              {
                "objectType": "JavaScript",
                "active": true,
                "sourceLines": [
                  "alert(\"NO BOX ID SELECTED\");"
                ],
                "injectContextObject": false,
                "asyncWait": true,
                "waitMode": "Synchronous"
              }
            ]
          }
        ],
        "asyncWait": true
      }
    ]
  },
  {
    "event": "TcHmiButton_6.onStateReleased",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "clearInterval(MoveLeft);"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>
</div>
<div id="activeRECT" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="25" data-tchmi-height-unit="px" data-tchmi-left="255" data-tchmi-left-unit="px" data-tchmi-top="413" data-tchmi-top-unit="px" data-tchmi-width="48" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-text-horizontal-alignment="Left" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-font-size="15" data-tchmi-creator-locked="True">
</div>
<div id="TcHmiCombobox" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiCombobox" data-tchmi-auto-focus-out="true" data-tchmi-combobox-text="Select Active ID" data-tchmi-height="25" data-tchmi-height-unit="px" data-tchmi-left="21" data-tchmi-left-unit="px" data-tchmi-top="583" data-tchmi-top-unit="px" data-tchmi-width="135" data-tchmi-width-unit="px" data-tchmi-text-horizontal-alignment="Left" data-tchmi-src-data="%i%RectIndex%/i%" data-tchmi-selected-index="0" data-tchmi-creator-locked="True">
<script data-tchmi-target-attribute="data-tchmi-content-padding" type="application/json">
{
  "top": 3,
  "right": 3,
  "bottom": 3,
  "left": 3
}
</script>




<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "TcHmiCombobox.onSelectionChanged",
    "actions": [
      {
        "objectType": "Condition",
        "active": true,
        "parts": [
          {
            "if": [
              {
                "compare1": {
                  "objectType": "Symbol",
                  "valueType": "tchmi:general#/definitions/UDINT",
                  "symbolExpression": "%ctrl%TcHmiCombobox::SelectedIndex%/ctrl%"
                },
                "compare2": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:general#/definitions/UDINT",
                  "value": 0
                },
                "compareOperator": "<=",
                "logic": null
              }
            ],
            "then": [
              {
                "objectType": "JavaScript",
                "active": true,
                "sourceLines": [
                  "TcHmi.Controls.get('activeRECT').setText('');"
                ],
                "injectContextObject": false,
                "asyncWait": true,
                "waitMode": "Synchronous"
              }
            ]
          },
          {
            "else": [
              {
                "objectType": "JavaScript",
                "active": true,
                "sourceLines": [
                  "var isi = TcHmi.Controls.get('TcHmiCombobox').getSelectedText();",
                  "TcHmi.Controls.get('activeRECT').setText(isi);"
                ],
                "injectContextObject": false,
                "asyncWait": true,
                "waitMode": "Synchronous"
              }
            ]
          }
        ],
        "asyncWait": true
      }
    ]
  }
]
</script>
</div>
<div id="TcHmiButton_7" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiButton" data-tchmi-height="24" data-tchmi-height-unit="px" data-tchmi-left="130" data-tchmi-left-unit="px" data-tchmi-text="ROTATE" data-tchmi-top="690" data-tchmi-top-unit="px" data-tchmi-width="59" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-text-font-weight="Bold" data-tchmi-creator-locked="True">

<script data-tchmi-target-attribute="data-tchmi-border-style" type="application/json">
{
  "left": "None",
  "right": "None",
  "top": "None",
  "bottom": "None"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-border-radius" type="application/json">
{
  "topLeft": 5.0,
  "topRight": 5.0,
  "bottomLeft": 5.0,
  "bottomRight": 5.0,
  "topLeftUnit": "px",
  "topRightUnit": "px",
  "bottomLeftUnit": "px",
  "bottomRightUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "TcHmiButton_7.onPressed",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "var BOX_NUM = TcHmi.Controls.get('activeRECT').getText();",
          "temp = TcHmi.Controls.get(BOX_NUM).getWidth();",
          "TcHmi.Controls.get(BOX_NUM).setWidth(TcHmi.Controls.get(BOX_NUM).getHeight());",
          "TcHmi.Controls.get(BOX_NUM).setHeight(temp);",
          "",
          "var rotationStates = JSON.parse(TcHmi.Symbol.read('rotationStates', TcHmi.SymbolType.Internal));",
          "rotationStates[BOX_NUM] = (rotationStates[BOX_NUM] + 90) % 360;",
          "TcHmi.Symbol.writeEx('%i%rotationStates%/i%', JSON.stringify(rotationStates));",
          "",
          "Box90 = {",
          "\tleft: 'Dashed', ",
          "\tright: 'Solid', ",
          "\ttop: 'Dashed', ",
          "\tbottom: 'Dashed'};",
          "Box90Width = {",
          "    left: 1,",
          "    right: 5,",
          "    top: 1,",
          "    bottom: 1,",
          "    leftUnit: \"px\",",
          "    rightUnit: \"px\",",
          "    topUnit: \"px\",",
          "    bottomUnit: \"px\"};",
          "\t",
          "Box180 = {",
          "\tleft: 'Dashed', ",
          "\tright: 'Dashed', ",
          "\ttop: 'Dashed', ",
          "\tbottom: 'Solid'};",
          "Box180Width = {",
          "    left: 1,",
          "    right: 1,",
          "    top: 1,",
          "    bottom: 5,",
          "    leftUnit: \"px\",",
          "    rightUnit: \"px\",",
          "    topUnit: \"px\",",
          "    bottomUnit: \"px\"};",
          "\t",
          "Box270= {",
          "\tleft: 'Solid', ",
          "\tright: 'Dashed', ",
          "\ttop: 'Dashed', ",
          "\tbottom: 'Dashed'};",
          "Box270Width = {",
          "    left: 5,",
          "    right: 1,",
          "    top: 1,",
          "    bottom: 1,",
          "    leftUnit: \"px\",",
          "    rightUnit: \"px\",",
          "    topUnit: \"px\",",
          "    bottomUnit: \"px\"};",
          "    ",
          "Box0= {",
          "\tleft: 'Dashed', ",
          "\tright: 'Dashed', ",
          "\ttop: 'Solid', ",
          "\tbottom: 'Dashed'};",
          "Box0Width = {",
          "    left: 1,",
          "    right: 1,",
          "    top: 5,",
          "    bottom: 1,",
          "    leftUnit: \"px\",",
          "    rightUnit: \"px\",",
          "    topUnit: \"px\",",
          "    bottomUnit: \"px\"};    ",
          "    ",
          "if (rotationStates[BOX_NUM] == 90) {",
          "\tTcHmi.Controls.get(BOX_NUM).setBorderStyle(Box90);",
          "\tTcHmi.Controls.get(BOX_NUM).setBorderWidth(Box90Width);",
          "} else if (rotationStates[BOX_NUM] == 180){",
          "\tTcHmi.Controls.get(BOX_NUM).setBorderStyle(Box180);",
          "\tTcHmi.Controls.get(BOX_NUM).setBorderWidth(Box180Width);",
          "} else if (rotationStates[BOX_NUM] == 270){",
          "\tTcHmi.Controls.get(BOX_NUM).setBorderStyle(Box270);",
          "\tTcHmi.Controls.get(BOX_NUM).setBorderWidth(Box270Width);",
          "} else {",
          "\tTcHmi.Controls.get(BOX_NUM).setBorderStyle(Box0);",
          "\tTcHmi.Controls.get(BOX_NUM).setBorderWidth(Box0Width);",
          "}"
        ],
        "injectContextObject": true,
        "asyncWait": true,
        "waitMode": "Asynchronous"
      }
    ]
  }
]
</script>

<script data-tchmi-target-attribute="data-tchmi-border-width" type="application/json">
{
  "left": 0,
  "right": 0,
  "top": 0,
  "bottom": 0,
  "leftUnit": "px",
  "rightUnit": "px",
  "topUnit": "px",
  "bottomUnit": "px"
}
</script>
</div>
<div id="activeRECT_1" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="25" data-tchmi-height-unit="px" data-tchmi-left="163" data-tchmi-left-unit="px" data-tchmi-text="Active BOX ID =" data-tchmi-top="413" data-tchmi-top-unit="px" data-tchmi-width="92" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-text-horizontal-alignment="Right" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-font-size="15" data-tchmi-creator-locked="True">
</div>
<div id="TcHmiButton_8" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiButton" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="21" data-tchmi-left-unit="px" data-tchmi-text="DELETE BOX" data-tchmi-top="413" data-tchmi-top-unit="px" data-tchmi-width="95" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-text-font-size="16" data-tchmi-text-horizontal-alignment="Center" data-tchmi-text-font-weight="Bold" data-tchmi-text-font-style="Normal" data-tchmi-text-vertical-alignment="Center" data-tchmi-creator-locked="True">

<script data-tchmi-target-attribute="data-tchmi-background-color" type="application/json">
{
  "color": "rgba(255, 0, 0, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(255, 255, 255, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "TcHmiButton_8.onPressed",
    "actions": [
      {
        "objectType": "Condition",
        "active": true,
        "parts": [
          {
            "if": [
              {
                "compare1": {
                  "objectType": "Symbol",
                  "valueType": "tchmi:general#/definitions/UDINT",
                  "symbolExpression": "%ctrl%TcHmiCombobox::SelectedIndex%/ctrl%"
                },
                "compare2": {
                  "objectType": "StaticValue",
                  "valueType": "tchmi:general#/definitions/UDINT",
                  "value": 0
                },
                "compareOperator": ">",
                "logic": null
              }
            ],
            "then": [
              {
                "objectType": "JavaScript",
                "active": true,
                "sourceLines": [
                  "var myArray = TcHmi.Symbol.read('RectIndex', TcHmi.SymbolType.Internal);",
                  "var myIndex = TcHmi.Controls.get('TcHmiCombobox').getSelectedIndex();",
                  "var myElement = TcHmi.Controls.get('TcHmiCombobox').getSelectedText();",
                  "var myElement2 = TcHmi.Controls.get(myElement);",
                  "",
                  "if (confirm(\"Delete \" + myElement + \" ? \")){",
                  "\tif (myElement2) {",
                  "\t    myElement2.destroy();",
                  "\t    myArray.splice(myIndex, 1);",
                  "\t\tTcHmi.Symbol.writeEx2('%i%RectIndex%/i%', myArray, function(writeResult) {});",
                  "\t\tTcHmi.Controls.get('TcHmiCombobox').setSelectedIndex(0);",
                  "\t\t}",
                  "}else{",
                  "\t\t//alert(\"Cancelled\");",
                  "}"
                ],
                "injectContextObject": true,
                "asyncWait": true,
                "waitMode": "Asynchronous"
              }
            ]
          },
          {
            "else": [
              {
                "objectType": "JavaScript",
                "active": true,
                "sourceLines": [
                  "alert(\"Please Choose Active Box ID\");"
                ],
                "injectContextObject": false,
                "asyncWait": true,
                "waitMode": "Synchronous"
              }
            ]
          }
        ],
        "asyncWait": true
      }
    ]
  }
]
</script>
</div>






<div id="panjangBOX" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiNumericInput" data-tchmi-auto-focus-out="true" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="21" data-tchmi-left-unit="px" data-tchmi-max-value="1500" data-tchmi-min-value="0" data-tchmi-reset-to-last-valid-value="true" data-tchmi-top="465" data-tchmi-top-unit="px" data-tchmi-width="134" data-tchmi-width-unit="px" data-tchmi-ignore-invalid-values="false" data-tchmi-placeholder="PANJANG" data-tchmi-decimal-digits="2" data-tchmi-creator-locked="True">
<script data-tchmi-target-attribute="data-tchmi-content-padding" type="application/json">
{
  "top": 3,
  "right": 3,
  "bottom": 3,
  "left": 3
}
</script>

</div>
<div id="lebarBOX" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiNumericInput" data-tchmi-auto-focus-out="true" data-tchmi-decimal-digits="2" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="162" data-tchmi-left-unit="px" data-tchmi-max-value="1500" data-tchmi-min-value="0" data-tchmi-reset-to-last-valid-value="true" data-tchmi-top="465" data-tchmi-top-unit="px" data-tchmi-width="135" data-tchmi-width-unit="px" data-tchmi-ignore-invalid-values="false" data-tchmi-placeholder="LEBAR" data-tchmi-creator-locked="True">
<script data-tchmi-target-attribute="data-tchmi-content-padding" type="application/json">
{
  "top": 3,
  "right": 3,
  "bottom": 3,
  "left": 3
}
</script>

</div>
<div id="namaPreset" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextbox" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="85" data-tchmi-left-unit="px" data-tchmi-text="" data-tchmi-top="877" data-tchmi-top-unit="px" data-tchmi-width="150" data-tchmi-width-unit="px" data-tchmi-placeholder="NAMA PRESET" data-tchmi-creator-locked="True">
<script data-tchmi-target-attribute="data-tchmi-content-padding" type="application/json">
{
  "top": 3,
  "right": 3,
  "bottom": 3,
  "left": 3
}
</script>


<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "namaPreset.onTextChanged",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "var textbox = TcHmi.Controls.get('namaPreset').getText();",
          "if (textbox.length > 10) {",
          "\tvar limit = textbox.substring(0, 10);",
          "\tTcHmi.Controls.get('namaPreset').setText(limit);",
          "}"
        ],
        "injectContextObject": true,
        "asyncWait": true,
        "waitMode": "Asynchronous"
      }
    ]
  },
  {
    "event": "namaPreset.onUserInteractionFinished",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "var textbox = TcHmi.Controls.get('namaPreset').getText();",
          "if (textbox.length > 10) {",
          "\tvar limit = textbox.substring(0, 10);",
          "\tTcHmi.Controls.get('namaPreset').setText(limit);",
          "}"
        ],
        "injectContextObject": true,
        "asyncWait": true,
        "waitMode": "Asynchronous"
      }
    ]
  }
]
</script>
</div>
<div id="TcHmiButton_12" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiButton" data-tchmi-height="30" data-tchmi-height-unit="px" data-tchmi-left="85" data-tchmi-left-unit="px" data-tchmi-text="Add Layout Preset" data-tchmi-top="915" data-tchmi-top-unit="px" data-tchmi-width="150" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-text-font-weight="Bold" data-tchmi-text-font-size="16" data-tchmi-creator-locked="True">

<script data-tchmi-target-attribute="data-tchmi-background-color" type="application/json">
{
  "color": "rgba(153, 246, 14, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(0, 0, 0, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "TcHmiButton_12.onPressed",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": false,
        "sourceLines": [
          "function savePreset(){",
          "\t",
          "\tvar rectanglesArray = TcHmi.Symbol.read('RectIndex', TcHmi.SymbolType.Internal);",
          "\tif (rectanglesArray.length <= 1) {",
          "\t    alert('Invalid amount of box');",
          "\t    return;",
          "\t}\t",
          "",
          "\tvar presetName = TcHmi.Controls.get('namaPreset').getText();",
          "\tif (!presetName) {",
          "\t    alert('Invalid name for preset');",
          "\t    return;",
          "\t}\t",
          "\t",
          "\tvar scale = JSON.parse(TcHmi.Symbol.read('ScaleTrans', TcHmi.SymbolType.Internal));",
          "    var origin = JSON.parse(TcHmi.Symbol.read('OriginTrans', TcHmi.SymbolType.Internal));",
          "\tvar rectanglesData = {};",
          "\t",
          "    //ADD PALLETE TO THE ARRAY OF RECTANGLE AS AN ADDITIONAL RECTANGLE",
          "\tvar specificRectangleId = \"PALLETTE_FIX\";",
          "\tvar specificRectangle = TcHmi.Controls.get(specificRectangleId);",
          "\tif (specificRectangle) {",
          "\t    rectanglesData[specificRectangleId] = {",
          "\t        top: specificRectangle.getTop(),",
          "\t        left: specificRectangle.getLeft(),",
          "\t        width: specificRectangle.getWidth(),",
          "\t        height: specificRectangle.getHeight(),",
          "\t        stroke: specificRectangle.getStrokeThickness(),",
          "\t        scale: scale,",
          "\t        origin: origin",
          "\t    };",
          "\t}",
          "    ",
          "\t//ITERATE ALL THE RECTANGLE IN THE ARRAY AND THEN APEND THE PROPERTIES AND ATTRIBUTE OF IT",
          "\tfor (var i = 0; i < rectanglesArray.length; i++) {",
          "\t    var rectangleId = rectanglesArray[i];",
          "\t    var rectangle = TcHmi.Controls.get(rectangleId);",
          "\t    if (rectangle) {",
          "    \t\tvar transform = rectangle.getTransform();",
          "    \t\t//var rotate = transform && transform[1] && transform[1].angle ? transform[1].angle : null;",
          "    \t\trectanglesData[rectangleId] = {",
          "\t\t        top: rectangle.getTop(),",
          "\t\t        left: rectangle.getLeft(),",
          "\t\t        width: rectangle.getWidth(),",
          "\t\t        height: rectangle.getHeight(),",
          "\t\t        //rotate: rotate,",
          "\t\t        scale: scale,",
          "\t\t        origin: origin",
          "\t\t    };",
          "    \t\t",
          "    \t\tif (rectangle.getLeft() < specificRectangle.getLeft() || rectangle.getTop() < specificRectangle.getTop() || (rectangle.getLeft()+rectangle.getWidth()*0.75) > (specificRectangle.getLeft()+specificRectangle.getWidth()*0.75) || (rectangle.getTop()+rectangle.getHeight()*0.75) > (specificRectangle.getTop()+specificRectangle.getHeight()*0.75)) ",
          "    \t\t{",
          "            \talert('one or more boxes exceed the palette limit');",
          "            \treturn;",
          "        \t}",
          "    \t\t",
          "    \t\tfor (var j = i + 1; j < rectanglesArray.length; j++) {",
          "\t\t        var rect1 = TcHmi.Controls.get(rectanglesArray[i]);",
          "\t\t        var rect2 = TcHmi.Controls.get(rectanglesArray[j]);",
          "\t\t        if (rect1.getLeft() < rect2.getLeft() + rect2.getWidth()*0.75 &&",
          "\t\t            rect1.getLeft() + rect1.getWidth()*0.75 > rect2.getLeft() && ",
          "\t\t            rect1.getTop() < rect2.getTop() + rect2.getHeight()*0.75 &&",
          "\t\t            rect1.getTop() + rect1.getHeight()*0.75 > rect2.getTop()) {",
          "\t\t            alert('Collision detected between ' + rectanglesArray[i] + ' and ' + rectanglesArray[j]);",
          "\t\t            return;",
          "\t\t        }",
          "\t\t    }",
          "\t\t}",
          "\t}",
          "\t",
          "\t",
          "\t",
          "\t//SAVE ALL OF THE RECTANGLE MENTION ABOVE TO A JSON FORMAT CONSISTING OF ALL THE SAVED PRESET",
          "\tfunction addPreset(presetName, rectanglesData) {",
          "\t\tTcHmi.Symbol.readEx2('%i%InternalSymbol%/i%', function (data) {",
          "\t\t    ",
          "\t\t\tif (data.error === TcHmi.Errors.NONE) {",
          "\t\t        var existingPresets = data.value ? JSON.parse(data.value) : [];",
          "\t\t        var existingPreset = existingPresets.find(function(p) { return p.name === presetName; });",
          "\t\t        ",
          "\t\t        if (existingPreset) {",
          "\t\t            alert('Preset \"' + presetName + '\" already exists.');",
          "\t\t            return;",
          "\t\t        }",
          "\t\t        ",
          "\t\t        existingPresets.push({ name: presetName, data: rectanglesData });",
          "\t\t        var updatedJson = JSON.stringify(existingPresets);",
          "\t\t        ",
          "\t\t        TcHmi.Symbol.writeEx('%i%InternalSymbol%/i%', updatedJson, function (writeData) {",
          "\t\t                             \t",
          "\t\t\t\t\tif (writeData.error === TcHmi.Errors.NONE) {",
          "\t\t                alert('Preset \"' + presetName + '\" has been added.');",
          "\t\t                ",
          "\t\t                var nameList = JSON.parse(TcHmi.Symbol.read('InternalSymbol', TcHmi.SymbolType.Internal));",
          "\t\t                function arrayToJson(nameList) {",
          "\t\t\t\t\t\t  return nameList.map(item => ({ preset: item.name }));",
          "\t\t\t\t\t\t}",
          "\t\t\t\t\t\tTcHmi.Symbol.writeEx2('%i%PresetSaver%/i%', arrayToJson(nameList));\t",
          "\t\t                ",
          "\t\t                var myArray = TcHmi.Symbol.read('RectIndex', TcHmi.SymbolType.Internal);",
          "\t\t\t\t\t\tfor (var i = 1; i < myArray.length; i++) {",
          "\t\t\t\t\t\t    var elementToRemove = TcHmi.Controls.get(myArray[i]);",
          "\t\t\t\t\t\t    if (elementToRemove) {",
          "\t\t\t\t\t\t        elementToRemove.destroy();",
          "\t\t\t\t\t\t    }",
          "\t\t\t\t\t\t}\t                ",
          "\t\t\t\t\t\tmyArray = [myArray[0]];",
          "\t\t\t\t\t\tTcHmi.Symbol.writeEx2('%i%RectIndex%/i%', myArray, function(writeResult) {});",
          "\t\t\t\t\t\tTcHmi.Controls.get('TcHmiCombobox').setSelectedIndex(0);",
          "\t\t\t\t\t\tTcHmi.Symbol.writeEx2('%i%BoxCounter%/i%', 0);",
          "\t\t\t\t\t\t",
          "\t\t            } else {",
          "\t\t                alert('Error writing preset \"' + presetName + '\" to the internal symbol:', writeData.error);",
          "\t\t            }",
          "\t\t        });",
          "\t\t    } else {",
          "\t\t        console.error('Error reading existing presets from the internal symbol:', data.error);",
          "\t\t    }",
          "\t\t});",
          "\t}",
          "\taddPreset(presetName, rectanglesData);",
          "}",
          "savePreset();"
        ],
        "injectContextObject": true,
        "asyncWait": true,
        "waitMode": "Asynchronous"
      },
      {
        "objectType": "JavaScript",
        "active": false,
        "sourceLines": [
          "function savedPreset() {",
          "\tvar rectanglesArray = TcHmi.Symbol.read('RectIndex', TcHmi.SymbolType.Internal);",
          "\tif (rectanglesArray.length <= 1) {",
          "\t\t    alert('WARNING!\\nInvalid amount of BOX');",
          "\t\t    return;",
          "\t}",
          "\t",
          "\tvar presetName = TcHmi.Controls.get('namaPreset').getText();",
          "\tif (!presetName) {",
          "\t\t    alert('WARNING!\\nInvalid name for PRESET');",
          "\t\t    return;",
          "\t}",
          "\t",
          "\tpalettall = TcHmi.Controls.get('PaletTall').getValue();",
          "\tboxtall = TcHmi.Controls.get('BoxTall').getValue();",
          "\t",
          "\tif (palettall <= 0 || boxtall <= 0) {",
          "\t\t    alert('WARNING!\\nInvalid value for TALL');",
          "\t\t    return;",
          "\t}\t",
          "\t",
          "\tvar scale = JSON.parse(TcHmi.Symbol.read('ScaleTrans', TcHmi.SymbolType.Internal));",
          "\tvar origin = JSON.parse(TcHmi.Symbol.read('OriginTrans', TcHmi.SymbolType.Internal));",
          "\t",
          "\tvar rectanglesData = {};",
          "\t",
          "\tvar specificRectangleId = \"PALLETTE_FIX\";",
          "\tvar specificRectangle = TcHmi.Controls.get(specificRectangleId);",
          "\tif (specificRectangle) {",
          "\t    rectanglesData[specificRectangleId] = {",
          "\t        top: specificRectangle.getTop(),",
          "\t        left: specificRectangle.getLeft(),",
          "\t        width: specificRectangle.getWidth(),",
          "\t        height: specificRectangle.getHeight(),",
          "\t        //stroke: 3,",
          "\t        tall: palettall",
          "\t    };",
          "\t}",
          "\t",
          "\tfor (var i = 0; i < rectanglesArray.length; i++) {",
          "\t    var rectangleId = rectanglesArray[i];",
          "\t    var rectangle = TcHmi.Controls.get(rectangleId);",
          "\t    if (rectangle) {",
          "\t\t\tvar transform = rectangle.getTransform();",
          "\t\t\trectanglesData[rectangleId] = {",
          "\t\t        top: rectangle.getTop(),",
          "\t\t        left: rectangle.getLeft(),",
          "\t\t        width: rectangle.getWidth(),",
          "\t\t        height: rectangle.getHeight(),",
          "\t\t        //stroke: 1,",
          "\t\t        tall: boxtall",
          "\t\t    };",
          "",
          "\t\t\tif (rectangle.getLeft() < specificRectangle.getLeft() || rectangle.getTop() < specificRectangle.getTop() || (rectangle.getLeft()+rectangle.getWidth()*0.75) > (specificRectangle.getLeft()+specificRectangle.getWidth()*0.75) || (rectangle.getTop()+rectangle.getHeight()*0.75) > (specificRectangle.getTop()+specificRectangle.getHeight()*0.75)) ",
          "\t    \t\t{",
          "\t            \talert('WARNING!\\none or more boxes exceed the palette limit');",
          "\t            \treturn;",
          "\t        }",
          "    \t\t",
          "    \t\tfor (var j = i + 1; j < rectanglesArray.length; j++) {",
          "\t\t        var rect1 = TcHmi.Controls.get(rectanglesArray[i]);",
          "\t\t        var rect2 = TcHmi.Controls.get(rectanglesArray[j]);",
          "\t\t        if (rect1.getLeft() < rect2.getLeft() + rect2.getWidth()*0.75 &&",
          "\t\t            rect1.getLeft() + rect1.getWidth()*0.75 > rect2.getLeft() && ",
          "\t\t            rect1.getTop() < rect2.getTop() + rect2.getHeight()*0.75 &&",
          "\t\t            rect1.getTop() + rect1.getHeight()*0.75 > rect2.getTop()) {",
          "\t\t            alert('WARNING!\\nCollision detected between ' + rectanglesArray[i] + ' and ' + rectanglesArray[j]);",
          "\t\t            return;",
          "\t\t        }",
          "\t        }",
          "\t    }",
          "\t}",
          "\tvar CurrentPreset = TcHmi.Symbol.read('PLC_PresetSaver', TcHmi.SymbolType.Internal);",
          "\tvar existingPreset = CurrentPreset.find(function(p) { return p.preset === presetName; });",
          "\t\t        ",
          "    if (existingPreset) {",
          "        alert('ERROR!\\nPreset \"' + presetName + '\" already exists.');",
          "        return;",
          "    }",
          "",
          "\tvar data = {name:presetName, data:rectanglesData};",
          "\tvar n = 0;",
          "\tlet arr = [];",
          "\t",
          "\tasync function processBoxes(data) {",
          "\t\tvar rotationStates = JSON.parse(TcHmi.Symbol.read('rotationStates', TcHmi.SymbolType.Internal));",
          "\t\t//console.log(data);",
          "\t\tfor (var boxName in data.data) {",
          "            var box = data.data[boxName];",
          "            ",
          "            let currentBox = [presetName, boxName, box.left, box.top, box.height, box.width, box.tall];",
          "\t\t\tarr.push(currentBox);",
          "\t\t\tconsole.log(arr);",
          "        }",
          "\t\tfor (var k = 0; k < arr.length; k++) {",
          "\t\t\tTcHmi.Symbol.writeEx('%s%PLC1.CSV_CreateBuffer.arr['+ k +'][0]%/s%', arr[k][0]);",
          "\t\t\tTcHmi.Symbol.writeEx('%s%PLC1.CSV_CreateBuffer.arr['+ k +'][1]%/s%', arr[k][1]);",
          "\t\t\tTcHmi.Symbol.writeEx('%s%PLC1.CSV_CreateBuffer.arr['+ k +'][2]%/s%', arr[k][2]);",
          "\t\t\tTcHmi.Symbol.writeEx('%s%PLC1.CSV_CreateBuffer.arr['+ k +'][3]%/s%', arr[k][3]);",
          "\t\t\tTcHmi.Symbol.writeEx('%s%PLC1.CSV_CreateBuffer.arr['+ k +'][4]%/s%', arr[k][4]);",
          "\t\t\tTcHmi.Symbol.writeEx('%s%PLC1.CSV_CreateBuffer.arr['+ k +'][5]%/s%', arr[k][5]);",
          "\t\t\tTcHmi.Symbol.writeEx('%s%PLC1.CSV_CreateBuffer.arr['+ k +'][6]%/s%', arr[k][6]);",
          "\t\t\tTcHmi.Symbol.writeEx('%s%PLC1.CSV_CreateBuffer.arr['+ k +'][7]%/s%', rotationStates[arr[k][1]]);",
          "\t\t}",
          "\t\t ",
          "\t\tTcHmi.Symbol.writeEx('%s%PLC1.CSV_CreateBuffer.SaveBuffer%/s%', true)",
          "\t\tawait new Promise(resolve => {",
          "            let intervalBuffer = setInterval(() => {",
          "               \tTcHmi.Symbol.readEx2('%s%PLC1.CSV_CreateBuffer.SaveBuffer%/s%', function (data7) {",
          "\t                if (data7.value == false) {",
          "\t\t\t\t\t\tclearInterval(intervalBuffer);",
          "            \t\t\tresolve();",
          "\t                }",
          "             \t});",
          "            }, 100);",
          "\t\t});\t",
          "\t\t",
          "\t    TcHmi.Symbol.writeEx('%s%PLC1.CSV_WritePRESETToCSV.sPresetName%/s%', presetName);",
          "\t\tTcHmi.Symbol.writeEx('%s%PLC1.CSV_WritePRESETToCSV.bGenerate%/s%', true)// SET WRITE PRESET NAME TO ITS OWN",
          "\t\t\t",
          "    \tTcHmi.Symbol.writeEx('%s%PLC1.CSV_WriteBOXToCSV.bGenerate%/s%', true, function (writeData) { // SET WRITE BOX PROPERTIES TO CSV",
          "\t\t\tif (writeData.error === TcHmi.Errors.NONE) {",
          "\t\t\t\talert('SUCCESS!\\nPreset \"' + presetName + '\" has been saved.');",
          "\t\t\t\t",
          "\t\t\t\tvar myArray = TcHmi.Symbol.read('RectIndex', TcHmi.SymbolType.Internal);",
          "\t\t\t\tfor (var i = 1; i < myArray.length; i++) {",
          "\t\t\t\t    var elementToRemove = TcHmi.Controls.get(myArray[i]);",
          "\t\t\t\t    if (elementToRemove) {",
          "\t\t\t\t        elementToRemove.destroy();",
          "\t\t\t\t    }",
          "\t\t\t\t}",
          "\t\t\t\t",
          "\t\t\t\tmyArray = [myArray[0]];",
          "\t\t\t\tTcHmi.Symbol.writeEx2('%i%RectIndex%/i%', myArray);",
          "\t\t\t\tTcHmi.Symbol.writeEx('%i%rotationStates%/i%', {});",
          "\t\t\t\tTcHmi.Controls.get('TcHmiCombobox').setSelectedIndex(0);",
          "\t\t\t\tTcHmi.Symbol.writeEx2('%i%BoxCounter%/i%', 0);",
          "\t\t\t\tTcHmi.Controls.get('panjangBOX').setValue(0);",
          "\t\t\t\tTcHmi.Controls.get('lebarBOX').setValue(0);",
          "\t\t\t\tTcHmi.Controls.get('namaPreset').setText('');",
          "\t\t\t\t",
          "\t\t\t\tTcHmi.View.load('LandingPage.view');",
          "\t\t\t\t",
          "\t\t\t} else {",
          "\t\t        alert('ERROR!\\nError writing preset \"' + presetName + '\" to csv', writeData.error);",
          "\t\t\t}\t\t\t\t\t\t                     \t",
          "\t\t});",
          "    }",
          "\tprocessBoxes(data);",
          "}",
          "savedPreset();"
        ],
        "injectContextObject": true,
        "asyncWait": true,
        "waitMode": "Asynchronous"
      },
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "function savedPreset() {",
          "\tvar rectanglesArray = TcHmi.Symbol.read('RectIndex', TcHmi.SymbolType.Internal);",
          "\tif (rectanglesArray.length <= 1) {",
          "\t\t    alert('WARNING!\\nInvalid amount of BOX');",
          "\t\t    return;",
          "\t}",
          "\t",
          "\tvar presetName = TcHmi.Controls.get('namaPreset').getText();",
          "\tif (!presetName) {",
          "\t\t    alert('WARNING!\\nInvalid name for PRESET');",
          "\t\t    return;",
          "\t}",
          "\t",
          "\tpalettall = TcHmi.Controls.get('PaletTall').getValue();",
          "\tboxtall = TcHmi.Controls.get('BoxTall').getValue();",
          "\t",
          "\tif (palettall <= 0 || boxtall <= 0) {",
          "\t\t    alert('WARNING!\\nInvalid value for TALL');",
          "\t\t    return;",
          "\t}\t",
          "\t",
          "\tvar scale = JSON.parse(TcHmi.Symbol.read('ScaleTrans', TcHmi.SymbolType.Internal));",
          "\tvar origin = JSON.parse(TcHmi.Symbol.read('OriginTrans', TcHmi.SymbolType.Internal));",
          "\t",
          "\tvar rectanglesData = {};",
          "\t",
          "\tvar specificRectangleId = \"PALLETTE_FIX\";",
          "\tvar specificRectangle = TcHmi.Controls.get(specificRectangleId);",
          "\tif (specificRectangle) {",
          "\t    rectanglesData[specificRectangleId] = {",
          "\t        top: specificRectangle.getTop(),",
          "\t        left: specificRectangle.getLeft(),",
          "\t        width: specificRectangle.getWidth(),",
          "\t        height: specificRectangle.getHeight(),",
          "\t        //stroke: 3,",
          "\t        tall: palettall",
          "\t    };",
          "\t}",
          "\t",
          "\tfor (var i = 0; i < rectanglesArray.length; i++) {",
          "\t    var rectangleId = rectanglesArray[i];",
          "\t    var rectangle = TcHmi.Controls.get(rectangleId);",
          "\t    if (rectangle) {",
          "\t\t\tvar transform = rectangle.getTransform();",
          "\t\t\trectanglesData[rectangleId] = {",
          "\t\t        top: rectangle.getTop(),",
          "\t\t        left: rectangle.getLeft(),",
          "\t\t        width: rectangle.getWidth(),",
          "\t\t        height: rectangle.getHeight(),",
          "\t\t        //stroke: 1,",
          "\t\t        tall: boxtall",
          "\t\t    };",
          "",
          "\t\t\tif (rectangle.getLeft() < specificRectangle.getLeft() || rectangle.getTop() < specificRectangle.getTop() || (rectangle.getLeft()+rectangle.getWidth()*0.75) > (specificRectangle.getLeft()+specificRectangle.getWidth()*0.75) || (rectangle.getTop()+rectangle.getHeight()*0.75) > (specificRectangle.getTop()+specificRectangle.getHeight()*0.75)) ",
          "\t    \t\t{",
          "\t            \talert('WARNING!\\none or more boxes exceed the palette limit');",
          "\t            \treturn;",
          "\t        }",
          "    \t\t",
          "    \t\tfor (var j = i + 1; j < rectanglesArray.length; j++) {",
          "\t\t        var rect1 = TcHmi.Controls.get(rectanglesArray[i]);",
          "\t\t        var rect2 = TcHmi.Controls.get(rectanglesArray[j]);",
          "\t\t        if (rect1.getLeft() < rect2.getLeft() + rect2.getWidth()*0.75 &&",
          "\t\t            rect1.getLeft() + rect1.getWidth()*0.75 > rect2.getLeft() && ",
          "\t\t            rect1.getTop() < rect2.getTop() + rect2.getHeight()*0.75 &&",
          "\t\t            rect1.getTop() + rect1.getHeight()*0.75 > rect2.getTop()) {",
          "\t\t            alert('WARNING!\\nCollision detected between ' + rectanglesArray[i] + ' and ' + rectanglesArray[j]);",
          "\t\t            return;",
          "\t\t        }",
          "\t        }",
          "\t    }",
          "\t}",
          "\tvar CurrentPreset = TcHmi.Symbol.read('PLC_PresetSaver', TcHmi.SymbolType.Internal);",
          "\tvar existingPreset = CurrentPreset.find(function(p) { return p.preset === presetName; });",
          "\t\t        ",
          "    if (existingPreset) {",
          "        alert('ERROR!\\nPreset \"' + presetName + '\" already exists.');",
          "        return;",
          "    }",
          "",
          "\tvar data = {name:presetName, data:rectanglesData};",
          "\tvar n = 0;",
          "\tlet arr = [];",
          "\t",
          "\tasync function processBoxes(data) {",
          "\t\tvar rotationStates = JSON.parse(TcHmi.Symbol.read('rotationStates', TcHmi.SymbolType.Internal));",
          "\t\t",
          "\t\tfor (var boxName in data.data) {",
          "            var box = data.data[boxName];",
          "            ",
          "            let currentBox = [presetName, boxName, box.left, box.top, box.height, box.width, box.tall];",
          "\t\t\tarr.push(currentBox);",
          "\t\t\tconsole.log(arr);",
          "        }",
          "\t\t",
          "\t\tfor (var k = 0; k < arr.length; k++) {",
          "\t\t\t",
          "\t\t\tTcHmi.Symbol.writeEx('%s%PLC1.CSV_WriteBOXToCSV.Box_Data['+ k +'][0]%/s%', arr[k][0]);",
          "\t\t\tTcHmi.Symbol.writeEx('%s%PLC1.CSV_WriteBOXToCSV.Box_Data['+ k +'][1]%/s%', arr[k][1]);",
          "\t\t\tTcHmi.Symbol.writeEx('%s%PLC1.CSV_WriteBOXToCSV.Box_Data['+ k +'][2]%/s%', arr[k][2]);",
          "\t\t\tTcHmi.Symbol.writeEx('%s%PLC1.CSV_WriteBOXToCSV.Box_Data['+ k +'][3]%/s%', arr[k][3]);",
          "\t\t\tTcHmi.Symbol.writeEx('%s%PLC1.CSV_WriteBOXToCSV.Box_Data['+ k +'][4]%/s%', arr[k][4]);",
          "\t\t\tTcHmi.Symbol.writeEx('%s%PLC1.CSV_WriteBOXToCSV.Box_Data['+ k +'][5]%/s%', arr[k][5]);",
          "\t\t\tTcHmi.Symbol.writeEx('%s%PLC1.CSV_WriteBOXToCSV.Box_Data['+ k +'][6]%/s%', arr[k][6]);",
          "\t\t\tTcHmi.Symbol.writeEx('%s%PLC1.CSV_WriteBOXToCSV.Box_Data['+ k +'][7]%/s%', rotationStates[arr[k][1]]);",
          "\t\t}",
          "\t\tTcHmi.Symbol.writeEx('%s%PLC1.CSV_WriteBOXToCSV.WriteFileName%/s%', presetName);",
          "\t\tTcHmi.Symbol.writeEx('%s%PLC1.CSV_WriteBOXToCSV.bGenerate%/s%', true);",
          "\t\tawait new Promise(resolve => {",
          "            let intervalBuffer = setInterval(() => {",
          "               \tTcHmi.Symbol.readEx2('%s%PLC1.CSV_WriteBOXToCSV.WriteDone%/s%', function (data7) {",
          "\t                if (data7.value == true) {",
          "\t\t\t\t\t\tclearInterval(intervalBuffer);",
          "            \t\t\tresolve();",
          "\t                }",
          "             \t});",
          "            }, 100);",
          "\t\t});\t",
          "\t\t",
          "\t    TcHmi.Symbol.writeEx('%s%PLC1.CSV_WritePRESETToCSV.sPresetName%/s%', presetName);",
          "\t\tTcHmi.Symbol.writeEx('%s%PLC1.CSV_WritePRESETToCSV.bGenerate%/s%', true, function (writeData) { // SET WRITE BOX PROPERTIES TO CSV",
          "\t\t\tif (writeData.error === TcHmi.Errors.NONE) {",
          "\t\t\t\talert('SUCCESS!\\nPreset \"' + presetName + '\" has been saved.');",
          "\t\t\t\t",
          "\t\t\t\tvar myArray = TcHmi.Symbol.read('RectIndex', TcHmi.SymbolType.Internal);",
          "\t\t\t\tfor (var i = 1; i < myArray.length; i++) {",
          "\t\t\t\t    var elementToRemove = TcHmi.Controls.get(myArray[i]);",
          "\t\t\t\t    if (elementToRemove) {",
          "\t\t\t\t        elementToRemove.destroy();",
          "\t\t\t\t    }",
          "\t\t\t\t}",
          "\t\t\t\t",
          "\t\t\t\tmyArray = [myArray[0]];",
          "\t\t\t\tTcHmi.Symbol.writeEx2('%i%RectIndex%/i%', myArray);",
          "\t\t\t\tTcHmi.Symbol.writeEx('%i%rotationStates%/i%', {\"PALLETTE_FIX\": 0});",
          "\t\t\t\tTcHmi.Controls.get('TcHmiCombobox').setSelectedIndex(0);",
          "\t\t\t\tTcHmi.Symbol.writeEx2('%i%BoxCounter%/i%', 0);",
          "\t\t\t\tTcHmi.Controls.get('panjangBOX').setValue(0);",
          "\t\t\t\tTcHmi.Controls.get('lebarBOX').setValue(0);",
          "\t\t\t\tTcHmi.Controls.get('namaPreset').setText('');",
          "\t\t\t\t",
          "\t\t\t\tTcHmi.View.load('LandingPage.view');",
          "\t\t\t\t",
          "\t\t\t} else {",
          "\t\t        alert('ERROR!\\nError writing preset \"' + presetName + '\" to csv', writeData.error);",
          "\t\t\t}\t\t\t\t\t\t                     \t",
          "\t\t});",
          "    }",
          "\tprocessBoxes(data);",
          "}",
          "savedPreset();"
        ],
        "injectContextObject": true,
        "asyncWait": true,
        "waitMode": "Asynchronous"
      }
    ]
  }
]
</script>
</div>
<div id="TcHmiTextblock_2" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="85" data-tchmi-left-unit="px" data-tchmi-text="MASUKAN NAMA PRESET" data-tchmi-top="860" data-tchmi-top-unit="px" data-tchmi-width="122" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-creator-locked="True">
</div>
<div id="TcHmiCombobox_1" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiCombobox" data-tchmi-auto-focus-out="true" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="163" data-tchmi-left-unit="px" data-tchmi-top="583" data-tchmi-top-unit="px" data-tchmi-width="135" data-tchmi-width-unit="px" data-tchmi-src-data="%i%StepIndex%/i%" data-tchmi-text="" data-tchmi-combobox-text="Select Move Step (mm)" data-tchmi-creator-locked="True">
<script data-tchmi-target-attribute="data-tchmi-content-padding" type="application/json">
{
  "top": 3,
  "right": 3,
  "bottom": 3,
  "left": 3
}
</script>

</div>
<div id="panjangPALET" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiNumericInput" data-tchmi-auto-focus-out="true" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="20" data-tchmi-left-unit="px" data-tchmi-max-value="20000" data-tchmi-min-value="0" data-tchmi-reset-to-last-valid-value="true" data-tchmi-top="238" data-tchmi-top-unit="px" data-tchmi-width="135" data-tchmi-width-unit="px" data-tchmi-ignore-invalid-values="false" data-tchmi-placeholder="LEBAR" data-tchmi-creator-locked="True">
<script data-tchmi-target-attribute="data-tchmi-content-padding" type="application/json">
{
  "top": 3,
  "right": 3,
  "bottom": 3,
  "left": 3
}
</script>

</div>
<div id="TcHmiTextblock_3" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="162" data-tchmi-left-unit="px" data-tchmi-text="MASUKAN PANJANG PALET" data-tchmi-top="220" data-tchmi-top-unit="px" data-tchmi-width="133" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-creator-locked="True">
</div>
<div id="TcHmiTextblock_4" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="20" data-tchmi-left-unit="px" data-tchmi-text="MASUKAN LEBAR PALET (mm)" data-tchmi-top="221" data-tchmi-top-unit="px" data-tchmi-width="132" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-creator-locked="True" data-tchmi-text-font-size="10">
</div>
<div id="lebarPALET" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiNumericInput" data-tchmi-auto-focus-out="true" data-tchmi-decimal-digits="0" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="162" data-tchmi-left-unit="px" data-tchmi-max-value="20000" data-tchmi-min-value="0" data-tchmi-reset-to-last-valid-value="true" data-tchmi-top="238" data-tchmi-top-unit="px" data-tchmi-width="135" data-tchmi-width-unit="px" data-tchmi-ignore-invalid-values="false" data-tchmi-placeholder="PANJANG" data-tchmi-creator-locked="True">
<script data-tchmi-target-attribute="data-tchmi-content-padding" type="application/json">
{
  "top": 3,
  "right": 3,
  "bottom": 3,
  "left": 3
}
</script>

</div>
<div id="TcHmiButton_15" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiButton" data-tchmi-height="30" data-tchmi-height-unit="px" data-tchmi-left="20" data-tchmi-left-unit="px" data-tchmi-text="MODIFY PALET" data-tchmi-top="273" data-tchmi-top-unit="px" data-tchmi-width="277" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-text-font-size="20" data-tchmi-text-font-weight="Bold" data-tchmi-creator-locked="True">


<script data-tchmi-target-attribute="data-tchmi-border-radius" type="application/json">
{
  "topLeft": 12.0,
  "topRight": 12.0,
  "bottomLeft": 12.0,
  "bottomRight": 12.0,
  "topLeftUnit": "px",
  "topRightUnit": "px",
  "bottomLeftUnit": "px",
  "bottomRightUnit": "px"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "TcHmiButton_15.onPressed",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "var lebar = TcHmi.Controls.get('lebarPALET').getValue();",
          "var panjang = TcHmi.Controls.get('panjangPALET').getValue();",
          "",
          "if (lebar > 0 && panjang > 0) {",
          "\t\tTcHmi.Controls.get('PALLETTE_FIX').setWidth(lebar);",
          "\t\tTcHmi.Controls.get('PALLETTE_FIX').setHeight(panjang);",
          "\t} else {",
          "\t    alert('WARNING!\\nInvalid value for PANJANG or LEBAR');",
          "\t}"
        ],
        "injectContextObject": false,
        "asyncWait": true,
        "waitMode": "Synchronous"
      }
    ]
  }
]
</script>
</div>
<div id="PALLETTE_FIX" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiRectangle" data-tchmi-height="1000" data-tchmi-height-unit="px" data-tchmi-top="220" data-tchmi-top-unit="px" data-tchmi-width="1200" data-tchmi-width-unit="px" data-tchmi-stroke-thickness="3" data-tchmi-left="370" data-tchmi-creator-locked="True">

<script data-tchmi-target-attribute="data-tchmi-transform" type="application/json">
[
  {
    "transformType": "Scale",
    "x": 0.75,
    "y": 0.75,
    "z": 1.0
  },
  {
    "transformType": "Origin",
    "x": 0.0,
    "y": 0.0,
    "xUnit": "px",
    "yUnit": "px"
  }
]
</script>


</div>




<div id="TcHmiTextblock_8" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="30" data-tchmi-left-unit="px" data-tchmi-text="LAYOUT EDITOR" data-tchmi-top="80" data-tchmi-top-unit="px" data-tchmi-width="194" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-text-vertical-alignment="Top" data-tchmi-text-horizontal-alignment="Center" data-tchmi-text-font-size="20" data-tchmi-text-font-style="Auto" data-tchmi-text-font-weight="Bold" data-tchmi-creator-locked="True">
<script data-tchmi-target-attribute="data-tchmi-background-color" type="application/json">
{
  "angle": 90.0,
  "stopPoints": [
    {
      "color": "rgba(0, 0, 0, 1)",
      "stop": "0%"
    },
    {
      "color": "rgba(13, 92, 64, 1)",
      "stop": "10%"
    },
    {
      "color": "rgba(23, 134, 94, 1)",
      "stop": "50%"
    },
    {
      "color": "rgba(9, 79, 54, 1)",
      "stop": "90%"
    },
    {
      "color": "rgba(0, 0, 0, 1)",
      "stop": "100%"
    }
  ]
}
</script>

<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(255, 255, 255, 1)"
}
</script>
</div>
<div id="TcHmiButton_27" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiButton" data-tchmi-height="25" data-tchmi-height-unit="px" data-tchmi-left="77" data-tchmi-left-unit="px" data-tchmi-text="MENU" data-tchmi-top="115" data-tchmi-top-unit="px" data-tchmi-width="100" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-text-font-weight="Bold" data-tchmi-text-font-size="20" data-tchmi-creator-locked="True">
<script data-tchmi-target-attribute="data-tchmi-trigger" type="application/json">
[
  {
    "event": "TcHmiButton_27.onPressed",
    "actions": [
      {
        "objectType": "JavaScript",
        "active": true,
        "sourceLines": [
          "var myArray = TcHmi.Symbol.read('RectIndex', TcHmi.SymbolType.Internal);",
          "myArray = [myArray[0]];",
          "TcHmi.Symbol.writeEx2('%i%RectIndex%/i%', myArray);",
          "TcHmi.Symbol.writeEx2('%i%rotationStates%/i%', {\"PALLETTE_FIX\": 0});",
          "TcHmi.Controls.get('TcHmiCombobox').setSelectedIndex(0);",
          "TcHmi.Symbol.writeEx2('%i%BoxCounter%/i%', 0);",
          "TcHmi.Controls.get('panjangBOX').setValue(0);",
          "TcHmi.Controls.get('lebarBOX').setValue(0);",
          "TcHmi.Controls.get('namaPreset').setText('');",
          "",
          "TcHmi.View.load('LandingPage.view');"
        ],
        "injectContextObject": true,
        "asyncWait": true,
        "waitMode": "Asynchronous"
      }
    ]
  }
]
</script>

<script data-tchmi-target-attribute="data-tchmi-background-color" type="application/json">
{
  "color": "rgba(244, 255, 0, 1)"
}
</script>

<script data-tchmi-target-attribute="data-tchmi-text-color" type="application/json">
{
  "color": "rgba(0, 0, 0, 1)"
}
</script>
</div>
<div id="PaletTall" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiNumericInput" data-tchmi-auto-focus-out="true" data-tchmi-decimal-digits="2" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="21" data-tchmi-left-unit="px" data-tchmi-max-value="1500" data-tchmi-min-value="0" data-tchmi-reset-to-last-valid-value="true" data-tchmi-top="820" data-tchmi-top-unit="px" data-tchmi-width="134" data-tchmi-width-unit="px" data-tchmi-ignore-invalid-values="false" data-tchmi-placeholder="TINGGI PALET" data-tchmi-creator-locked="True">
<script data-tchmi-target-attribute="data-tchmi-content-padding" type="application/json">
{
  "top": 3,
  "right": 3,
  "bottom": 3,
  "left": 3
}
</script>

</div>
<div id="TcHmiTextblock_68" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="18" data-tchmi-height-unit="px" data-tchmi-left="91" data-tchmi-left-unit="px" data-tchmi-text="TINGGI PALET DAN BOX" data-tchmi-top="801" data-tchmi-top-unit="px" data-tchmi-width="123" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-creator-locked="True">
</div>
<div id="BoxTall" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiNumericInput" data-tchmi-auto-focus-out="true" data-tchmi-decimal-digits="2" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="162" data-tchmi-left-unit="px" data-tchmi-max-value="1500" data-tchmi-min-value="0" data-tchmi-reset-to-last-valid-value="true" data-tchmi-top="820" data-tchmi-top-unit="px" data-tchmi-width="135" data-tchmi-width-unit="px" data-tchmi-ignore-invalid-values="false" data-tchmi-placeholder="TINGGI BOX" data-tchmi-creator-locked="True">
<script data-tchmi-target-attribute="data-tchmi-content-padding" type="application/json">
{
  "top": 3,
  "right": 3,
  "bottom": 3,
  "left": 3
}
</script>

</div>
<div id="TcHmiTextblock_75" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="130" data-tchmi-left-unit="px" data-tchmi-text="mm" data-tchmi-top="238" data-tchmi-top-unit="px" data-tchmi-width="22" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-text-horizontal-alignment="Right" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-font-size="14" data-tchmi-creator-locked="True">
</div>
<div id="TcHmiTextblock_76" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="273" data-tchmi-left-unit="px" data-tchmi-text="mm" data-tchmi-top="238" data-tchmi-top-unit="px" data-tchmi-width="22" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-text-horizontal-alignment="Right" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-font-size="14" data-tchmi-creator-locked="True">
</div>
<div id="TcHmiTextblock_77" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="130" data-tchmi-left-unit="px" data-tchmi-text="mm" data-tchmi-top="465" data-tchmi-top-unit="px" data-tchmi-width="22" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-text-horizontal-alignment="Right" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-font-size="14" data-tchmi-creator-locked="True">
</div>
<div id="TcHmiTextblock_78" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="273" data-tchmi-left-unit="px" data-tchmi-text="mm" data-tchmi-top="465" data-tchmi-top-unit="px" data-tchmi-width="22" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-text-horizontal-alignment="Right" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-font-size="14" data-tchmi-creator-locked="True">
</div>
<div id="TcHmiTextblock_79" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="273" data-tchmi-left-unit="px" data-tchmi-text="mm" data-tchmi-top="819" data-tchmi-top-unit="px" data-tchmi-width="22" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-text-horizontal-alignment="Right" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-font-size="14" data-tchmi-creator-locked="True">
</div>
<div id="TcHmiTextblock_80" data-tchmi-type="TcHmi.Controls.Beckhoff.TcHmiTextblock" data-tchmi-height="26" data-tchmi-height-unit="px" data-tchmi-left="130" data-tchmi-left-unit="px" data-tchmi-text="mm" data-tchmi-top="819" data-tchmi-top-unit="px" data-tchmi-width="22" data-tchmi-width-unit="px" data-tchmi-word-wrap="true" data-tchmi-text-horizontal-alignment="Right" data-tchmi-text-vertical-alignment="Center" data-tchmi-text-font-size="14" data-tchmi-creator-locked="True">
</div>
</div>